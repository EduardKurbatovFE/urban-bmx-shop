import bcrypt from 'bcryptjs';
import { supabase } from '@/lib/supabase';
import NextAuth from 'next-auth';
import Credentials from 'next-auth/providers/credentials';
import Google from 'next-auth/providers/google';

const handler = NextAuth({
  providers: [
    Google({
      clientId: process.env.AUTH_GOOGLE_ID!,
      clientSecret: process.env.AUTH_GOOGLE_SECRET!,
    }),
    Credentials({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(
        credentials: { email: string; password: string } | undefined
      ) {
        if (!credentials) return null;

        const { email, password } = credentials;

        try {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –±–∞–∑—ñ
          const { data: existingUser, error: findUserError } = await supabase
            .from('users')
            .select('*')
            .eq('email', email)
            .single();

          if (findUserError && findUserError.code !== 'PGRST116') {
            console.error(
              '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:',
              findUserError.message
            );
            return null;
          }

          if (!existingUser) {
            // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
            console.error('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
            return null;
            // throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
          }

          // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
          const isPasswordCorrect = await bcrypt.compare(
            password,
            existingUser.password
          );
          if (!isPasswordCorrect) {
            console.error('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å');
            throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å');
          }

          // –Ø–∫—â–æ –≤—Å–µ –≥–∞—Ä–∞–∑–¥, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
          return {
            id: existingUser.id,
            email: existingUser.email,
            name: existingUser.name,
          };
        } catch (error) {
          console.error('üî• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
          throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó124554');
        }
      },
    }),
  ],
  secret: process.env.AUTH_SECRET,
  session: {
    strategy: 'jwt', // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JWT –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
  },
  callbacks: {
    async signIn({ user, account, profile, email, credentials }) {
      console.log('üîê [signIn] –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', user);

      try {
        const { data, error } = await supabase
          .from('users')
          .select('id')
          .eq('email', user?.email)
          .single();

        if (error && error.code !== 'PGRST116') {
          console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è:', error.message);
        }

        if (!data) {
          console.log('üì¶ –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
          const { error: insertError } = await supabase.from('users').insert({
            email: user?.email,
            name: user?.name,
            image: user?.image,
            created_at: new Date().toISOString(),
          });

          if (insertError) {
            console.error(
              '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:',
              insertError.message
            );
          } else {
            console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –≤ Supabase!');
          }
        } else {
          console.log('‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î:', data.id);
        }

        return true; // –î–æ–∑–≤–æ–ª—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –≤ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É
      } catch (err) {
        console.error('üî• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ signIn callback:', err);
        return true; // –î–æ–∑–≤–æ–ª—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫
      }
    },
  },
});

export { handler as GET, handler as POST };
